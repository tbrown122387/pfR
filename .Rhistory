#[1]  50.0  52.5  55.0  57.5  60.0  62.5  65.0  67.5  70.0  72.5  75.0
#[12]  77.5  80.0  82.5  85.0  87.5  90.0  92.5  95.0  97.5 100.0
#````
#Also, assign an expression that generates something similar to the above, but make it end on $1000$. Assign it to the variable `q3pb2`.
q3pb<-seq(50.0,100.0,2.5)
q3pb2<-seq(50.0,1000,2.5)
### c
#Assign an expression that generates the following to the variable `q3pc`.
#````{verbatim}
#[1] 2010 2010 2010 2010 2011 2011 2011 2011 2012 2012 2012 2012 2013
#[14] 2013 2013 2013 2014 2014 2014 2014 2015 2015 2015 2015 2016 2016
#[27] 2016 2016 2017 2017 2017 2017
#````
#Also, assign an expression that generates something similar to the above, but make it start on $1900$ and end on $2023$. Assign it to the variable `q3pc2`.
q3pc<-rep(2010:2017,each=4)
q3pc2<-rep(1900:2023,each=4)
### d
#Assign an expression that generates the following to the variable `q3pd`.
#````{verbatim}
#[1] 2016 2016 2016 2016 2017 2017 2017
#````
q3pd<-rep(c(2016,2017),c(4,3))
### e
#Assign an expression that generates the following to the variable `q3pe`.
#````{verbatim}
#[1] 1295 1296 1297 1298 1299 1300 1299 1298 1297 1296 1295 1294 1293
#[14] 1292 1291 1290
#````
e1<-seq(1295,1300)
e2<-seq(1299,1290)
q3pe<-c(e1,e2)
### f
#Assign an expression that generates the following to the variable `q3pf`.
#````{verbatim}
#[1] 4160 4055 3950 3845 3740 3635 3530
#````
q3pf<-seq(4160,3530,length = 7)
is.character(invalidNames) & length(invalidNames) >= 5
all(sort(invalidNames) == c("2018_Revenue",".2018.Revenue","Revenue 2018","_Revenue_2018","Revenue(2018)"))
sort(invalidNames)
isTRUE(all.equal(profitPerCustomer,553.9/51.3))
isTRUE(all.equal(profitPerCustomerEst,10))
isTRUE(all.equal(percStreaming,553.9/679.4*100))
isTRUE(all.equal(q2profit,559.9/608.8*100))
is.factor(itChanged) == TRUE
#---
#title: "Homework 1"
#output: pdf_document
#---
## Instructions
#Complete the following problems and submit to Gradescope your work as a file named `hw1.R`. Remember to read the *autograding caveats*!
## Problem 1
#Indicate which of the variable names listed below are not valid in R. Assign the names of the invalid variable names to a `character` `vector` called `invalidNames`.
#- `2018_Revenue`
#- `.2018.Revenue`
#- `.Revenue.2018`
#- `_Revenue_2018`
#- `Revenue2018`
#- `Revenue 2018`
#- `Revenue(2018)`
#- `Revenue_2018`
#- `Revenue.2018`
#- `Revenue.2018.`##
invalidNames<-c("2018_Revenue",".2018.Revenue","Revenue 2018","_Revenue_2018","Revenue(2018)")
## Problem 2
#Write the code to answer each question below.
#- The profit Netflix earned from US streaming in Q3 2017 was \$553.9 million coming from 51.3 million US streaming customers. What is their profit per US streaming customer in millions of dollars? Assign your answer to the variable `profitPerCustomer`.
#- For budgeting purposes, it is best to underestimate profit slightly. Use a function to determine the appropriate whole number budgeting estimate for their profit per US streaming customer. Assign the function output to the variable `profitPerCustomerEst`.
#- The profit Netflix earned overall in Q3 2017 was \$679.4 million. What percentage of their profit came from their US streaming service that quarter? Assign your answer to the variable `percStreaming`.
#- The profit Netflix earned from US streaming customers in Q2 2017 was \$559.9 million and the profit they earned overall that quarter was \$608.8 million. Did the percentage of their overall profit due to their US streaming service change from Q2 to Q3? If so, assign `TRUE` to `itChanged`. Otherwise assign `FALSE`.
#- What was the profit percentage difference from Q2 to Q3 2017? Assign your numeric response to `percDiffQ2Q3`.
#- In Q3 2017, Netflix reported 107.5 million customers over all their services. Assuming that each customer only uses one of their services, how many customers use a service other than US streaming? Assign your answer to the variable `numCustomersNotStreaming`.
profitPerCustomer<-553.9/51.3
profitPerCustomer
profitPerCustomerEst<-floor(profitPerCustomer)
profitPerCustomerEst
percStreaming<-553.9/679.4*100
percStreaming
q2profit<-559.9/608.8*100
q2profit
itChanged =TRUE
percDiffQ2Q3 = percStreaming - q2profit
percDiffQ2Q3
numCustomersNotStreaming = 107.5 - 51.3
numCustomersNotStreaming
## Problem 3
#Write code to generate the following output. Assign the result of that expression to a variable with a particular name so that it may be tested. You may use the `c` function to combine two sequences, but not as the only mechanism to yield the answer.
### a
#Assign an expression that generates the following to the variable `q3pa`.
#````{verbatim}
#[1] "Q1" "Q1" "Q1" "Q1"
#````
# Also, assign an expression that generates something similar to the above, but make its length $900$. Assign it to the variable `q3pa2`.
q3pa<-rep("Q1",4)
q3pa2<-rep("Q1",900)
### b
#Assign an expression that generates the following to the variable `q3pb`.
#````{verbatim}
#[1]  50.0  52.5  55.0  57.5  60.0  62.5  65.0  67.5  70.0  72.5  75.0
#[12]  77.5  80.0  82.5  85.0  87.5  90.0  92.5  95.0  97.5 100.0
#````
#Also, assign an expression that generates something similar to the above, but make it end on $1000$. Assign it to the variable `q3pb2`.
q3pb<-seq(50.0,100.0,2.5)
q3pb2<-seq(50.0,1000,2.5)
### c
#Assign an expression that generates the following to the variable `q3pc`.
#````{verbatim}
#[1] 2010 2010 2010 2010 2011 2011 2011 2011 2012 2012 2012 2012 2013
#[14] 2013 2013 2013 2014 2014 2014 2014 2015 2015 2015 2015 2016 2016
#[27] 2016 2016 2017 2017 2017 2017
#````
#Also, assign an expression that generates something similar to the above, but make it start on $1900$ and end on $2023$. Assign it to the variable `q3pc2`.
q3pc<-rep(2010:2017,each=4)
q3pc2<-rep(1900:2023,each=4)
### d
#Assign an expression that generates the following to the variable `q3pd`.
#````{verbatim}
#[1] 2016 2016 2016 2016 2017 2017 2017
#````
q3pd<-rep(c(2016,2017),c(4,3))
### e
#Assign an expression that generates the following to the variable `q3pe`.
#````{verbatim}
#[1] 1295 1296 1297 1298 1299 1300 1299 1298 1297 1296 1295 1294 1293
#[14] 1292 1291 1290
#````
e1<-seq(1295,1300)
e2<-seq(1299,1290)
q3pe<-c(e1,e2)
### f
#Assign an expression that generates the following to the variable `q3pf`.
#````{verbatim}
#[1] 4160 4055 3950 3845 3740 3635 3530
#````
q3pf<-seq(4160,3530,length = 7)
is.factor(itChanged) == TRUE
is.factor(itChanged)
isTRUE(all.equal(percDiffQ2Q3,q2profit - percStreaming))
isTRUE(all.equal(q3pa,rep("Q1",4)))
isTRUE(all.equal(q3pa2,rep("Q1",900)))
isTRUE(all.equal(q3pb,seq(50.0,100.0,2.5)))
isTRUE(all.equal(q3pb2,seq(50.0,1000,2.5)))
isTRUE(all.equal(q3pc,rep(2010:2017,each=4)))
isTRUE(all.equal(q3pc2,rep(1900:2023,each=4)))
require(crossdes)
install.packages("crossdes")
require(crossdes)
find.BIB(5, 4, 3)
find.BIB(trt = 5, b = 4, k = 1)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB(trt = 5, b = 4, k = 3)
find.BIB
# debug
fileName <- "~/Desktop/test_data.csv"
# debug
fileName <- "~/Desktop/test_data.csv"
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
read.csv(fileName)
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
tail(read.csv(fileName), 1)
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
tail(read.csv(fileName), 1)[1]
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
as.Date(tail(read.csv(fileName), 1)[1])
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)
lastDate <- lastRow[1]
lastDate
class(lastDate)
class(lastRow)
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)[1,]
lastDate <- lastRow[1]
class(lastDate)
lastRow
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)[1,]
lastRow
class(lastRow)
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)[1,1]
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)[1,]
lastDate <- lastRow[1,1]
class(lastDate)
lastDate
as.Date(lastDate)
lastDate <- as.Date(lastDate)
Sys.Date()
# get last weekday (proxy for last day market was open)
today <- Sys.Date()
class(today)
today
today-1
wday(today)
weekdays(today)
weekdays(today-1)
weekdays(today-2)
weekdays(today-3)
weekdays(today-4)
weekdays(today-5)
weekdays(today-6)
library(xts)
fileName <- "~/Desktop/test_data.csv"
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)[1,]
lastDate <- lastRow[1,1]
lastDate <- as.Date(lastDate)
# get last weekday (proxy for last day market was open)
today <- Sys.Date()
stillChecking <- TRUE
testDay <- today
while(stillChecking){
testDay <- testDay - 1
wasWeekday <- weekdays(testDay) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if( wasWeekday ){
lastTradingDay <- testDay
stillChecking <- FALSE
}
}
lastTradingDay
lastTradingDay
lsatDate
lastDate
lastTradingDay == lastDateAcquired
fileName <- "~/Desktop/test_data.csv"
# assumes the bottom of the file looks like this
# 2023-01-13,52.349998,139.699997,74.739998,89.949997,36.119999,135.449997,102.459999,83.790001,39.560001,130.490005,71.330002
lastRow <- tail(read.csv(fileName), 1)[1,]
lastDateAcquired <- lastRow[1,1]
lastDateAcquired <- as.Date(lastDateAcquired)
# get last weekday (a proxy for last day market was open)
today <- Sys.Date()
stillChecking <- TRUE
testDay <- today
while(stillChecking){
testDay <- testDay - 1
wasWeekday <- weekdays(testDay) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if( wasWeekday ){
lastTradingDay <- testDay
stillChecking <- FALSE
}
}
lastTradingDay == lastDateAcquired
paste("touch", touchFileName)
touchFileName <- "ayy"
paste("touch", touchFileName)
Sys.time()
knitr::opts_knit$set(root.dir = '~/trbcap/')
Sys.time()
load("data/param_estimates/mle1.RData")
head(mu)
mleMu <- mu
mleSigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/r1factor.RData")
r1Mu <- mu
r1Sigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/r2factor.RData")
r2Mu <- mu
r2Sigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/mle1.RData")
mleMu <- mu
mleSigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/r1factor.RData")
r1Mu <- mu
r1Sigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/r2factor.RData")
r2Mu <- mu
r2Sigma <- Sigma
rm(list=c("mu", "Sigma"))
?geom_bar
library(ggplot2)
?geom_bar
results <- cbind(mleMu, r1Mu, r2Mu)
results
rownames(results)
gsub(".Adjusted", replacement = "", rownames(results))
results$symbol <- gsub(".Adjusted", replacement = "", rownames(results))
results
results <- cbind(mleMu, r1Mu, r2Mu)
gsub(".Adjusted", replacement = "", rownames(results))
class(results)
results <- data.frame(mleMu, r1Mu, r2Mu)
results
results$symbol <- gsub(".Adjusted", replacement = "", rownames(results))
results
rownames(results) <- NULL
results
colnames(results) <- c("mle", "r1", "r2", "ticker")
head(results)
results <- data.frame(c(mleMu, r1Mu, r2Mu))
results
gsub(".Adjusted", replacement = "", rownames(mleMu))
mleMu
names(mleMu)
gsub(".Adjusted", replacement = "", names(mleMu))
rep(gsub(".Adjusted", replacement = "", names(mleMu)), 3)
results <- data.frame(c(mleMu, r1Mu, r2Mu))
results$ticker <- rep(gsub(".Adjusted", replacement = "", names(mleMu)), 3)
results
colnames(results) <- c("estimate", "ticker")
head(results)
rep(c("a","b"), each = 2)
results$model <- rep(c("mle","r1", "r2"), each = length(mleMu))
results <- data.frame(c(mleMu, r1Mu, r2Mu))
results$ticker <- rep(gsub(".Adjusted", replacement = "", names(mleMu)), 3)
results$model <- rep(c("mle","r1", "r2"), each = length(mleMu))
colnames(results) <- c("estimate", "ticker")
results
colnames(results) <- c("estimate", "ticker", "model")
results
ggplot(data = results, aes(x = ticker, y = estimate, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), alpha = 0.75)
load("data/param_estimates/mle1.RData")
mleMu <- mu
mleSigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/r1factor.RData")
r1Mu <- mu
r1Sigma <- Sigma
rm(list=c("mu", "Sigma"))
load("data/param_estimates/r2factor.RData")
r2Mu <- mu
r2Sigma <- Sigma
rm(list=c("mu", "Sigma"))
diag(mleSigma)
results <- data.frame(c(diag(mleSigma), diag(r1Sigma), diag(r2Sigma)))
results$ticker <- rep(gsub(".Adjusted", replacement = "", names(mleMu)), 3)
results$model <- rep(c("mle","r1", "r2"), each = length(mleMu))
colnames(results) <- c("estimate", "ticker", "model")
results
results <- data.frame(c(diag(mleSigma), diag(r1Sigma), diag(r2Sigma)))
results$ticker <- rep(gsub(".Adjusted", replacement = "", names(mleMu)), 3)
results$model <- rep(c("mle","r1", "r2"), each = length(mleMu))
colnames(results) <- c("estimate", "ticker", "model")
results
head(results)
results <- data.frame(c(diag(mleSigma), diag(r1Sigma), diag(r2Sigma)))
results
results <- sqrt(results)
results
results <- data.frame(c(diag(mleSigma), diag(r1Sigma), diag(r2Sigma)))
results <- sqrt(results)
results$ticker <- rep(gsub(".Adjusted", replacement = "", names(mleMu)), 3)
results$model <- rep(c("mle","r1", "r2"), each = length(mleMu))
colnames(results) <- c("estimate", "ticker", "model")
head(results)
ggplot(data = results, aes(x = ticker, y = estimate, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), alpha = 0.75)
ggplot(data = results, aes(x = ticker, y = estimate, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), alpha = 0.75) +
ggtitle("std. dev. estimates")
numExpUnits <- 20
allPeople <- 1:numExpUnits
sample(allPeople, size = length(allPeople), replace = F)
sample(allPeople, size = length(allPeople), replace = F)
groups <- seq(1, numLevels, length.out = numExpUnits)
numLevels <- 3
numExpUnits <- 21
# assumes each group is equally-sized
allPeople <- 1:numExpUnits
groups <- seq(1, numLevels, length.out = numExpUnits)
groups
?groups <- seq(1, numLevels, length.out = numExpUnits, )
?seq
seq(1, numLevels)
seq(1, numLevels, each = 2)
rep(1:numLevels, each = 2)
?rep(1:numLevels, length())
rep(1:numLevels, length.out = numExpUnits)
groups <- rep(1:numLevels, length.out = numExpUnits)
aPermutation <- sample(allPeople, size = length(allPeople), replace = F)
groups
# assumes each group is equally-sized
allPeople <- 1:numExpUnits
groups <- rep(1:numLevels, length.out = numExpUnits)
aPermutation <- sample(allPeople, size = length(allPeople), replace = F)
aPermutation[groups]
aPermutation
groups
groups
# assumes each group is equally-sized
allPeople <- 1:numExpUnits
#groups <- rep(1:numLevels, length.out = numExpUnits)
aPermutation <- sample(allPeople, size = length(allPeople), replace = F)
data.frame(matrix(aPermutation, ncol = numLevels))
# assumes each group is equally-sized
allPeople <- 1:numExpUnits
aPermutation <- sample(allPeople, size = length(allPeople), replace = F)
groups <- data.frame(matrix(aPermutation, ncol = numLevels))
colnames(groups)
TRUE
"TRUE"
3 == 3
3 == 4
pi
"pi"
Benjamini–Hochberg procedure
# after
setwd("~/pfexamplesinr/")
# after
setwd("~/")
Rcpp::sourceCpp(file = "~/pfexamplesinr/src/likelihoods.cpp")
devtools::build(pkg = "~/pfexamplesinr/")
Rcpp::compileAttributes(pkgdir = "~/pfexamplesinr/")
?Rcpp::sourceCpp
devtools::check()
devtools::check(pkg = "~/pfexamplesinr/")
devtools::check(pkg = "~/pfexamplesinr/")
numTime <- 3
numParts <- 500 # must agree with #define NP in likelihoods.cpp
u <- rnorm(numTime*(numParts+1))
params <- c(.9, 1, .1) # -1 < phi < 1, beta, sigma > 0
pfexamplesinr::svolApproxLL(rnorm(numTime), params, u)
devtools::check(pkg = "~/pfexamplesinr/")
# Load the Rcpp module exposed with RCPP_MODULE( ... ) macro.
loadModule(module = "RcppStudentEx", TRUE)
# Load the Rcpp module exposed with RCPP_MODULE( ... ) macro.
Rcpp::loadModule(module = "RcppStudentEx", TRUE)
# Load the Rcpp module exposed with RCPP_MODULE( ... ) macro.
Rcpp::loadModule(module = "pfr", TRUE)
mod <- new(svol_leverage, name = "svol_leverage_mod", .5, .5, .5, .5)
library(pfr)
# Load the Rcpp module exposed with RCPP_MODULE( ... ) macro.
setwd("~/pfr")
?Rcpp::loadModule(module = "pfr", TRUE)
library(pfr)
# Load the Rcpp module exposed with RCPP_MODULE( ... ) macro.
loadModule(module = "svol_leverage_module", TRUE)
# Load the Rcpp module exposed with RCPP_MODULE( ... ) macro.
?Rcpp::loadModule(module = "svol_leverage_module", TRUE)
library(pfr)
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
pfr::svol_leverage(.5,.5,.5,.5)
mod <-  new(svol_leverage, name = "mod", .5, .5, .5, .5)
mod <-  new(svol_leverage, .5, .5, .5, .5)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
isS4(mod)
names(mod)
pfr::svol_leverage(.5,.5,.5,.5)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike()
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod
mod$lastLogCondLike()
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
detach("package:pfr", unload=TRUE)
library(pfr)
detach("package:pfr", unload=TRUE)
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike()
View(mod)
(.packages())
detach("package:pfr", unload=TRUE)
(.packages())
# check with (.packages())
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike()
detach("package:pfr", unload=TRUE)
(.packages())
# check with (.packages())
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike() # broken <-
mod$lastLogCondLike()
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike()
str(mod)
detach("package:pfr", unload=TRUE)
(.packages())
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike()
detach("package:pfr", unload=TRUE)
install.packages("~/pfr_1.0.tar.gz", repos = NULL, type="source")
library(pfr)
mod <-  new(svol_leverage, phi=.5, mu=.5, sigma=.5, rho=.5)
mod$lastLogCondLike()
traceback()
